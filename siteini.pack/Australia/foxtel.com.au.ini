**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: foxtel.com.au
* @MinSWversion: V1.1.1/54
* @Revision 4 - [17/11/2015] Mitchell Ross/philzgr8
*   - Remove of duplicate descriptions
* @Revision 3 - [02/07/2015] Francis De Paemeleere
*   - Adjust to site changes
* @Revision 2 - [27/02/2015] Francis De Paemeleere
*   - fix .channels.xml generation (tanks @damof) + make it easier to configure
* @Revision 1 - [22/11/2014] Jan van Straaten
*   - one day ahead fix: firstshow=1
* @Revision 0 - [07/11/2014] Jan van Straaten
*   - creation
* @Remarks:
*	- regional setting for Melbourne VIC
*	- see foxtel.com.au_info.txt for changing region
* @header_end
**------------------------------------------------------------------------------------------------
*
site {url=foxtel.com.au|timezone=UTC+11:00|maxdays=14|cultureinfo=en-AU|charset=UTF-8|titlematchfactor=90|firstshow=1}
site {episodesystem=xmltv_ns|ratingsystem=ACB}
*
url_index{url|https://epg.foxtel.com.au/epg-service/epg/EpgServiceV2}
*
url_index.headers {method=SOAP}
url_index.headers {customheader=SOAPAction=http://epg.foxtel.com.au/SearchEvents}
url_index.headers {postdata='index_temp_6'}
url_index.headers {accept=*/*|contenttype=text/xml}
url_index.headers {customheader=Accept-Encoding=gzip,deflate} * to speedup the downloading of the index pages
*
scope.range {(urlindex)|end}
index_temp_1.modify {calculate(format=date,yyyy-MM-dd)|'urldate'}
index_temp_2.modify {calculate(format=date,yyyy-MM-dd)|'urldate' 1:0:0 +}

index_temp_6.modify {clear}
index_temp_6.modify {addstart|<s:StartDate xmlns:types="http://epg.foxtel.com.au/schema">'index_temp_1'T00:00:00</s:StartDate><s:EndDate xmlns:types="http://epg.foxtel.com.au/schema">'index_temp_2'T00:00:00</s:EndDate></s:DateRange><s:ExtendedSearchInd>false</s:ExtendedSearchInd><s:Channels><s:Id>'config_site_id'</s:Id></s:Channels><s:IsSeriesLinkStart>false</s:IsSeriesLinkStart><s:InProgressInd>true</s:InProgressInd><s:StartRecordNbr>0</s:StartRecordNbr><s:NbrRecordsRequested>60</s:NbrRecordsRequested><s:IncludeNeighbouringFTA>false</s:IncludeNeighbouringFTA></s:SearchEventsIn></e:Body></e:Envelope>}

index_variable_element.modify {clear}
index_temp_1.modify {clear}
index_temp_2.modify {clear}
index_temp_4.modify {clear}
index_temp_5.modify {clear}


*  ###############################
*  Region configuration start
*  ###############################
* a list of possible values can be found in foxtel.com.au_info.txt (example here is Melbourne VIC)
* don't forget to adjust the "timezone=" above to the correct setting!
index_temp_1.modify {addstart|8336}		* RegionId
index_temp_2.modify {addstart|2}			* StateId
index_temp_3.modify {addstart|NSW}			* StateCode
index_temp_4.modify {addstart|25184}		* BouquetId
index_temp_5.modify {addstart|37}			* SubBouquetId
*  ###############################
*  Region configuration end
*  ###############################

	
index_variable_element.modify {addstart|<s:Bouquet><s:BouquetId xmlns:types="http://epg.foxtel.com.au/schema">'index_temp_4'</s:BouquetId><s:SubBouquetId xmlns:types="http://epg.foxtel.com.au/schema">'index_temp_5'</s:SubBouquetId></s:Bouquet><s:StateId>'index_temp_2'</s:StateId>}
index_temp_6.modify {addstart|<e:Envelope xmlns:s="http://epg.foxtel.com.au/schema" xmlns:e="http://schemas.xmlsoap.org/soap/envelope/"><e:Header><s:SecurityHeader xmlns="http://epg.foxtel.com.au/schema"><s:Code>bae4e7</s:Code><s:Code>c263a851-f</s:Code><s:Code>b85b5aee-485</s:Code><s:Code>3ec1fba0-24</s:Code></s:SecurityHeader></e:Header><e:Body><s:SearchEventsIn>'index_variable_element'<s:DateRange>}

end_scope

scope.range {(splitindex)|end}
index_showsplit.scrub {regex||<ns2:Event>(<ns2:ProgramId>.+?)</ns2:Event>||}
* remove page overlaps
index_showsplit.modify {cleanup(removeduplicates keeplast)}
end_scope

scope.range {(indexshowdetails)|end}
index_start.scrub {regex||<ns2:ScheduledDate>\d{4}-\d{2}-\d{2}T(\d{2}:\d{2}).+?</ns2:ScheduledDate>||}
index_duration.scrub {regex||<ns2:Duration>(\d*)</ns2:Duration>||} * in minutes
index_title.scrub {regex||<ns2:ProgramTitle>(.+?)</ns2:ProgramTitle>||}
*index_subtitle.scrub {regex||<ns2:EpisodeTitle>(.*?)</ns2:EpisodeTitle>||}
index_rating.scrub {regex||<ns2:ParentalRating>(.*?)</ns2:ParentalRating>||}
index_premiere.scrub {regex||<ns2:PremiereInd>(.*?)</ns2:PremiereInd>||}
index_premiere.modify {replace(~ "true")|'index_premeiere'|true}
index_duration.modify {calculate(format=time)|'index_duration' 60 /} * converted into hh:mm
*
index_temp_4.scrub {regex||<ns2:EventId>(\d+?)</ns2:EventId>||} * the EventId
index_urlshow.modify {addstart|https://epg.foxtel.com.au/epg-service/epg/EpgServiceV2}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate} * to speedup the downloading of the detail pages
index_urlshow.headers {method=SOAP}
index_urlshow.headers {accept=*/*|contenttype=text/xml}
index_urlshow.headers {customheader=SOAPAction=http://epg.foxtel.com.au/GetEventDetails}
index_urlshow.headers {postdata=<e:Envelope xmlns:s="http://epg.foxtel.com.au/schema" xmlns:e="http://schemas.xmlsoap.org/soap/envelope/"><e:Header><s:SecurityHeader xmlns="http://epg.foxtel.com.au/schema"><s:Code>bae4e7</s:Code><s:Code>c263a851-f</s:Code><s:Code>b85b5aee-485</s:Code><s:Code>3ec1fba0-24</s:Code></s:SecurityHeader></e:Header><e:Body><s:GetEventDetailsIn>'index_variable_element'<s:EventId>'index_temp_4'</s:EventId></s:GetEventDetailsIn></e:Body></e:Envelope>}
end_scope
*
scope.range {(showdetails)|end}
title.scrub {regex||<ns2:ProgramTitle>(.+?)</ns2:ProgramTitle>||}
subtitle.scrub {regex||<ns2:EpisodeTitle>(.+?)</ns2:EpisodeTitle>||}
description.scrub {regex||<ns2:MergedSynopsis>(.*?)</ns2:MergedSynopsis>||}
* description.scrub {regex||<ns2:ExtendedSynopsis>(.*?)</ns2:ExtendedSynopsis>||}
productiondate.scrub {regex||<ns2:YearOfProduction>(\d{4})</ns2:YearOfProduction>||}
category.scrub {regex||<ns2:GenreCode>(.*?)</ns2:GenreCode>||}
category.scrub {regex||<ns2:SubGenreCode>(.*?)</ns2:SubGenreCode>||}
category.modify {replace|\|| } * combine genre and subgenre for easy manipulation further down
temp_3.scrub {regex||<ns2:EpisodeNumber>(\d*?)</ns2:EpisodeNumber>||} * episode number
temp_2.scrub {regex||<ns2:SeriesNumber>(\d*?)</ns2:SeriesNumber>||} * season
* onscreen syntax of episode
temp_2.modify {addstart(not "")|S}
episode.modify {addstart('temp_3' not "")|Ep'temp_3'}
episode.modify {addstart('temp_2' not "")|'temp_2', }
description.modify {remove|'episode'.}  * remove the double data of episode
* conversion of episode to xmltv_ns
* temp_2 = season
* temp_3 = episode
* temp_4 = number of seasons
* temp_5 = number of episodes
temp_2.modify {remove|S}
temp_2.modify {calculate(not="" format=F0)|1 -}
temp_3.modify {calculate(not="" format=F0)|1 -}
episode.modify {clear}
episode.modify {addend('temp_2' not="")|'temp_2'}
episode.modify {addend('temp_4' not="")|/'temp_4'}
episode.modify {addend|.}
episode.modify {addend('temp_3' not="")|'temp_3'}
episode.modify {addend('temp_5' not="")|/'temp_5'}
episode.modify {addend|.}
episode.modify {clear(="..")}
*
*
description.modify {remove(type=regex)|"(\s*?\(.+?\))"} * removes 'consumer advice'?
description.modify {cleanup}
actor.scrub {regex||<ns2:Actor>(.*?)</ns2:Actor>||}
director.scrub {regex||<ns2:Director>(.*?)</ns2:Director>||}
*
* genre and subgenre conversion table
temp_1.modify {substring(type=regex)|'category' "(\d{2}) "} *the genre code
* genre code 02 entertainment
category.modify {replace('temp_1' "02" type=regex)|'category' "(\d{2}) "|Entertainment }
* genre code 04 movies
category.modify {replace('temp_1' "04" type=regex)|'category' "(\d{2}) "|Movie }
* genre code 06 sport
category.modify {replace('temp_1' "06" type=regex)|'category' "(\d{2}) "|Sport }
* genre code 08 News & Documentaries
category.modify {replace('temp_1' "08" type=regex)|'category' "(\d{2}) "|News & Documentaries }
* genre code 10 Kids & Family
category.modify {replace('temp_1' "10" type=regex)|'category' "(\d{2}) "|Kids & Family }
* genre code 12 Music & Radio
category.modify {replace('temp_1' "12" type=regex)|'category' "(\d{2}) "|Music & Radio }
* genre code 14 Special Interest
category.modify {replace('temp_1' "12" type=regex)|'category' "(\d{2}) "|Special Interest }
* subgenres
category.modify {replace('temp_1' "02" type=regex)|1|\|Action & Thriller}
category.modify {replace('temp_1' "02" type=regex)|2|\|Adventure}
category.modify {replace('temp_1' "02" type=regex)|3|\|Comedy}
category.modify {replace('temp_1' "02" type=regex)|4|\|Mystery & Horror}
category.modify {replace('temp_1' "02" type=regex)|5|\|Drama}
category.modify {replace('temp_1' "02" type=regex)|6|\|Educational}
category.modify {replace('temp_1' "02" type=regex)|7|\|Light Entertainment}
category.modify {replace('temp_1' "02" type=regex)|8|\|Lifestyle & Documentaries}
category.modify {replace('temp_1' "02" type=regex)|9|\|Reality}
category.modify {replace('temp_1' "02" type=regex)|10|\|Arts}
category.modify {replace('temp_1' "02" type=regex)|11|\|Sci-Fi & Fantasy}
category.modify {replace('temp_1' "02" type=regex)|12|\|War & Western}
category.modify {replace('temp_1' "02" type=regex)|13|\|Talk Shows}
category.modify {replace('temp_1' "02" type=regex)|14|\|Special Events}
category.modify {replace('temp_1' "02" type=regex)|15|\|Other}

category.modify {replace('temp_1' "04" type=regex)|16|\|Action & Adventure}
category.modify {replace('temp_1' "04" type=regex)|17|\|Animation}
category.modify {replace('temp_1' "04" type=regex)|18|\|Documentaries}
category.modify {replace('temp_1' "04" type=regex)|19|\|Drama}
category.modify {replace('temp_1' "04" type=regex)|20|\|Erotic}
category.modify {replace('temp_1' "04" type=regex)|21|\|Sci-Fi & Fantasy}
category.modify {replace('temp_1' "04" type=regex)|22|\|World Cinema}
category.modify {replace('temp_1' "04" type=regex)|23|\|Horror}
category.modify {replace('temp_1' "04" type=regex)|24|\|Musical & Dance}
category.modify {replace('temp_1' "04" type=regex)|25|\|Thriller & Suspense}
category.modify {replace('temp_1' "04" type=regex)|26|\|Romance}
category.modify {replace('temp_1' "04" type=regex)|27|\|War, Western & History}
category.modify {replace('temp_1' "04" type=regex)|28|\|Mystery & Crime}
category.modify {replace('temp_1' "04" type=regex)|29|\|Comedy}
category.modify {replace('temp_1' "04" type=regex)|30|\|Kids & Family}
category.modify {replace('temp_1' "04" type=regex)|31|\|Other}

category.modify {replace('temp_1' "06" type=regex)|32|\|AFL}
category.modify {replace('temp_1' "06" type=regex)|33|\|Track & Pool}
category.modify {replace('temp_1' "06" type=regex)|34|\|Court Sports}
category.modify {replace('temp_1' "06" type=regex)|35|\|Boxing & Wrestling}
category.modify {replace('temp_1' "06" type=regex)|36|\|Cricket}
category.modify {replace('temp_1' "06" type=regex)|37|\|Baseball}
category.modify {replace('temp_1' "06" type=regex)|38|\|Extreme Sports}
category.modify {replace('temp_1' "06" type=regex)|39|\|Winter Sports}
category.modify {replace('temp_1' "06" type=regex)|40|\|Golf}
category.modify {replace('temp_1' "06" type=regex)|41|\|Racing}
category.modify {replace('temp_1' "06" type=regex)|42|\|News & Variety}
category.modify {replace('temp_1' "06" type=regex)|43|\|Rugby League}
category.modify {replace('temp_1' "06" type=regex)|44|\|Rugby Union}
category.modify {replace('temp_1' "06" type=regex)|45|\|Football & Soccer}
category.modify {replace('temp_1' "06" type=regex)|46|\|Special}
category.modify {replace('temp_1' "06" type=regex)|47|\|Other}

category.modify {replace('temp_1' "08" type=regex)|48|\|Business & Finance}
category.modify {replace('temp_1' "08" type=regex)|49|\|International}
category.modify {replace('temp_1' "08" type=regex)|50|\|Local}
category.modify {replace('temp_1' "08" type=regex)|51|\|Panel, Talk & Interview}
category.modify {replace('temp_1' "08" type=regex)|52|\|Public Affairs & Political}
category.modify {replace('temp_1' "08" type=regex)|53|\|Weather & Information}
category.modify {replace('temp_1' "08" type=regex)|54|\|Sports}
category.modify {replace('temp_1' "08" type=regex)|55|\|Biography}
category.modify {replace('temp_1' "08" type=regex)|56|\|People & Culture}
category.modify {replace('temp_1' "08" type=regex)|57|\|History}
category.modify {replace('temp_1' "08" type=regex)|58|\|Science & Technology}
category.modify {replace('temp_1' "08" type=regex)|59|\|Natural World}
category.modify {replace('temp_1' "08" type=regex)|60|\|Travel & Adventure}
category.modify {replace('temp_1' "08" type=regex)|61|\|Other}

category.modify {replace('temp_1' "10" type=regex)|62|\|Adventure & Action}
category.modify {replace('temp_1' "10" type=regex)|63|\|Animation & Cartoon}
category.modify {replace('temp_1' "10" type=regex)|64|\|Comedy}
category.modify {replace('temp_1' "10" type=regex)|65|\|Drama}
category.modify {replace('temp_1' "10" type=regex)|66|\|Educational}
category.modify {replace('temp_1' "10" type=regex)|67|\|Fantasy}
category.modify {replace('temp_1' "10" type=regex)|68|\|Game Show}
category.modify {replace('temp_1' "10" type=regex)|69|\|Movies}
category.modify {replace('temp_1' "10" type=regex)|70|\|Musical}
category.modify {replace('temp_1' "10" type=regex)|71|\|Pre-school}
category.modify {replace('temp_1' "10" type=regex)|72|\|Sport}
category.modify {replace('temp_1' "10" type=regex)|73|\|Science}
category.modify {replace('temp_1' "10" type=regex)|74|\|Technology}
category.modify {replace('temp_1' "10" type=regex)|75|\|Reality}
category.modify {replace('temp_1' "10" type=regex)|76|\|Other}

category.modify {replace('temp_1' "12" type=regex)|77|\|Favourites}
category.modify {replace('temp_1' "12" type=regex)|78|\|Classical & Opera}
category.modify {replace('temp_1' "12" type=regex)|79|\|Country}
category.modify {replace('temp_1' "12" type=regex)|80|\|Dance & Techno}
category.modify {replace('temp_1' "12" type=regex)|81|\|Reality & Fact}
category.modify {replace('temp_1' "12" type=regex)|82|\|Jazz & Blues}
category.modify {replace('temp_1' "12" type=regex)|83|\|Pop}
category.modify {replace('temp_1' "12" type=regex)|84|\|Live & Request}
category.modify {replace('temp_1' "12" type=regex)|85|\|Rap & Hip Hop}
category.modify {replace('temp_1' "12" type=regex)|86|\|Rock}
category.modify {replace('temp_1' "12" type=regex)|87|\|Soul & R&B}
category.modify {replace('temp_1' "12" type=regex)|88|\|Radio}
category.modify {replace('temp_1' "12" type=regex)|89|\|Specials}
category.modify {replace('temp_1' "12" type=regex)|90|\|Other}

category.modify {replace('temp_1' "14" type=regex)|91|\|Religion}
category.modify {replace('temp_1' "14" type=regex)|92|\|Foreign Language}
category.modify {replace('temp_1' "14" type=regex)|93|\|Adult}
category.modify {replace('temp_1' "14" type=regex)|94|\|Shopping}
category.modify {replace('temp_1' "14" type=regex)|95|\|Help}
category.modify {replace('temp_1' "14" type=regex)|96|\|Other}
title.modify {addstart ('category'~"Movie")|Movie: }
end_scope

**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**@auto_xml_channel_start
* url_index{url|https://epg.foxtel.com.au/epg-service/epg/EpgServiceV2}
* url_index.headers {customheader=SOAPAction=http://epg.foxtel.com.au/InitialiseEpg}
* url_index.headers {postdata='index_temp_6'}

* scope.range {(urlindex)|end}
* index_temp_6.modify {clear}
* index_temp_6.modify {addstart|<e:Envelope xmlns:e="http://schemas.xmlsoap.org/soap/envelope/" xmlns:s="http://epg.foxtel.com.au/schema"><e:Header><s:SecurityHeader xmlns="http://epg.foxtel.com.au/schema"><s:Code>bae4e7</s:Code><s:Code>c263a851-f</s:Code><s:Code>b85b5aee-485</s:Code><s:Code>3ec1fba0-24</s:Code></s:SecurityHeader></e:Header><e:Body><s:InitialiseEpgIn><s:FoxtelAccountId>0</s:FoxtelAccountId><s:StateCode>'index_temp_3'</s:StateCode><s:RegionId>'index_temp_1'</s:RegionId></s:InitialiseEpgIn></e:Body></e:Envelope>}
* end_scope

* index_site_channel.scrub {regex||<ns2:ChannelName>(.+?)</ns2:ChannelName>||}
* index_site_id.scrub {regex||<ns2:Channel><ns2:Id>(\d+?)</ns2:Id>||}
* scope.range {(channellist)|end}
* index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}

* end_scope
* @auto_xml_channel_end
