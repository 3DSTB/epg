**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: en.timefor.tv
* @MinSWversion: V1.1.1/56.17
* @Revision 8 - [02/03/2016] Jan van Straaten
* Fix of starttime, added stop from detail
* @Revision 7 - [10/11/2015] Francis De Paemeleere
* Fix Unix times for special channels. Get the last 10 numbers (prefix numbers are not always the same length)
* @Revision 6 - [28/10/2015] Jan van Straaten
* Unix start time including date, timezone UTC
* @Revision 5 - [02/03/2014] Francis De Paemeleere
* add show icon
* remove duplicate shows
* sync to base version
* @Revision 4 - [21/11/2013] Francis De Paemeleere
* use generic xmltv_ns episode generation
* @Revision 3 - [20/08/2013] Francis De Paemeleere
* fix showdetail title error + minor fixes
* add automatic channel generation
* @Revision 2 - [25/10/2012] Jan van Straaten
* episode is follwing the xmltv_ns format >> season.episode.part
* @Revision 1 - [01/10/2012] Jesper Schumacher
* in episode : - is replaced with /
* @Remarks: used as base version for se.timefor.tv and dk.timefor.tv
* @header_end
**------------------------------------------------------------------------------------------------
site {url=en.timefor.tv|timezone=UTC|maxdays=14|cultureinfo=en-GB|charset=UTF-8|titlematchfactor=90|episodesystem=xmltv_ns}

url_index{url|http://en.timefor.tv/listings/|channel|/|urldate|}
url_index.headers {customheader=Accept-Encoding=gzip,deflate}     * to speedup the downloading of the index pages
urldate.format {datestring|yyyy-MM-dd}
index_showsplit.scrub {multi|<table class="block epg|<tr|"></td>|</table>} * "></td> and not </tr> because indexpage is showing progressbar for current show

scope.range {(splitindex)|end}
index_showsplit.modify {cleanup(removeduplicates=equal span=1)}
*index_showsplit.modify {replace(debug)|\||\|\n\n} * testing only
end_scope

index_urlshow {url|http://en.timefor.tv|<td class="title">|href="|" class="programsummary" |</a>}
index_urlshow.headers {customheader=Accept-Encoding=gzip,deflate}     * to speedup the downloading of the detail pages
index_start.scrub {regex()||<a href="/i/\d*(\d{10})-||} * Unix time
index_title.scrub {single|programid="|">|</a>|</a>}

* get the channellogo:
*example :config_site_id="tv4-sverige"
index_variable_element.modify {clear}
index_variable_element.modify {addstart(scope=urlindex)|'config_site_id'}
index_urlchannellogo.scrub {single|<a href="/listings/'index_variable_element'">|<img src="|" alt=|</a>} * this is a big logo
* adding  this line gets the small one:
*index_urlchannellogo.modify {remove|_big}
*
**************** Showdetails ***************
scope.range {(showdetails)|end}
** stop from detail
** needs beta 56.17
stop.scrub {regex()||<strong>.+?\d{2}:\d{2} - (\d{2}:\d{2}).+?</strong>||}
stop.modify {calculate(timezone=Europe/Berlin)} 
**
** alternative for the previous line that works without timezone argument
** calculate the timedifference between index_start and start in deteil (temp_9) because they are in a different timezone (UTC and Europe/Berlin)
*temp_9.scrub {regex()||<strong>.+?(\d{2}:\d{2}) - \d{2}:\d{2}.+?</strong>||} *starttime in detail, time component only
*temp_8.modify {calculate(format=time)|'index_start'} * timecomponent index_start
** convert to decimal
*temp_8.modify {calculate(format=F2)}
*temp_9.modify {calculate(format=F2)}
** if index_start just before midnight and detailstart after midnight we add 24 hours to detail start
*temp_9.modify {calculate(debug 'temp_8' > 'temp_9' format=F2)|24 +}
*temp_7.modify {calculate(format=F2)|'temp_9' 'temp_8' -}
** convert to timespan
*temp_7.modify {calculate(format=timespan,hours)}
** correct the stoptime for the timezone definition difference
*stop.modify {calculate(format=time)|'stop' 'temp_7' -}
** 
title.scrub {single(includeblock=1)|<h2|>|</h2>|</h2>}
titleoriginal.scrub {single(lang=en)|Original titel:|">|</p>|</td></tr>}
subtitle.scrub {single|Episode titel:|">|</p>|</td></tr>} * if a real episode title is available
temp_5.scrub {single(include=last)|class="epg"|"> - |</span>|</p><div} * will be used if no episode title is available
description.scrub {single(separator="Read more on " force include=first)|<meta name="Description" content="|||">}
category.scrub {single(separator="/")|Genre:|">|</p>|</td></tr>} * finds genre eg. komedie, tv serier, etc.
temp_1.scrub {single|Episode:</strong></p>|sæson |</p></td></tr>|</tr>} *  finds the "sæson" number, if it is a sæson
category.scrub {single(separator="/")|Type:|">|</p>|</td></tr>} * finds more Typeinfo eg. Film, serie etc.
productiondate.scrub {single|From:|">|</p>|</td></tr>} * finds productionyear
temp_2.scrub {single|Episode:|">|</p>|</td></tr>} * extracts all episode info incl. sæson-info
actor.scrub {multi|<h3>Cast</h3>|<strong>|</p>|</table>} * finds actor list, HTML junk is removed with modify later
showicon.scrub {regex||<img [^>]*src=\"([^\"]*)\"[^>]* id=\"pictureHolder\"[^>]*>||}

director.modify {substring(type=regex)|'actor' "^.*<br>\s*Director\s*$"}
actor.modify 	{remove(type=regex)|'actor' "^.*<br>\s*Director\s*$"}		* remove all non actors
actor.modify {remove(type=regex)|(</strong><br>.*)} * remove any actor role (after the </strong><br>)
director.modify {remove(type=regex)|(</strong><br>.*)}
***episode in xmltv_ns format***
temp_2.modify {remove|sæson 'temp_1'} * removes "sæson" and number in episode
temp_2.modify {remove| }
temp_2.modify {replace|:|\|} * replace : with | (= make multi)
temp_4.modify {substring(type=element)|'temp_2' 1 1} * is the number of episodes
temp_2.modify {substring(type=element)|0 1} * is the episode number
temp_3.modify {clear}
* temp_1 = season
* temp_2 = episode
* temp_3 = number of seasons
* temp_4 = number of episodes
temp_1.modify {calculate(not="" format=F0)|1 -}
temp_2.modify {calculate(not="" format=F0)|1 -}
episode.modify {clear}
episode.modify {addend('temp_1' not="")|'temp_1'}
episode.modify {addend('temp_3' not="")|/'temp_3'}
episode.modify {addend|.}
episode.modify {addend('temp_2' not="")|'temp_2'}
episode.modify {addend('temp_4' not="")|/'temp_4'}
episode.modify {addend|.}
episode.modify {clear(="..")}
subtitle.modify {addstart(="")|'temp_5'} * add, if no real episode title was found
category.modify {replace|/|\|}
end_scope

**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*subpage.format {list|ee|lv|lt|nl|be|dk|uk|fi|fr|it|no|pl|ru|sw|es|se|cz|tr|de|at}
*url_index{url|http://en.timefor.tv/ajax/channel_list.php?language=|subpage|}
*index_site_id.scrub {multi||||}
*scope.range {(channellist)|end}
** now change the channel names according to the country groups (because there can be duplicate channel names between diff. country groups!)
** find all the country groups
*index_temp_1.modify {substring(type=regex)|'index_site_id' "<div id=\"channels(.*?)\""}
*index_temp_1.modify {cleanup(removeduplicates=equal,100)}
*index_temp_5.modify {calculate(type=element format=F0)|'index_temp_1' #}         * how many elements? Used as loop counter.
*loop {('index_temp_5' > "0" max=50)|end}
*index_temp_5.modify {calculate(format=F0)|1 -} 									* decrease the loop counter
*index_temp_2.modify {substring(type=element)|'index_temp_1' 'index_temp_5' 1}	* element to work on
*index_site_id.modify {replace(type=regex)|<div id="channels'index_temp_2'".*?<ul.*?(?:<li.*?<p.*?(>).*?</p>.*?</li>)*</ul></div>|>'index_temp_2' }
*end_loop
*index_site_channel.modify {addstart|'index_site_id'}
** now get id and channel name
*index_site_channel.modify {substring(type=regex)|<ul.*?(?:<li.*?<p.*?>(.*?)</p>.*?</li>)*</ul>}
*index_site_id.modify {substring(type=regex)|<ul.*?(?:<li.*?onclick="document\.location\.href=\'/listings/(.*?)\'.*?</li>)*</ul>}
*
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
** @auto_xml_channel_end
