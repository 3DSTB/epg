**------------------------------------------------------------------------------------------------
* @header_start
* WebGrab+Plus ini for grabbing EPG data from TvGuide websites
* @Site: starhubtvanywhere.com
* @MinSWversion: V1.1.1/53.7
*   none
* @Revision 3 - [19/02/2014] Jan van Straaten
*  remove of duplicates in showsplit, cultureinfo=en-US
*  extract of productiondate, remove of (..) at the end of the title
*  added episode in xmltv_ns format
* @Revision 2 - [19/02/2014] Francis De Paemeleere
*  fixs small index_showsplit issue where some channels were not grabbed
* @Revision 1 - [16/02/2014] Francis De Paemeleere
*  adjust to site changes
* @Revision 0 - [10/01/2014] Francis De Paemeleere
*  creation
* @Remarks:
*   Version for all channels
* @header_end
**------------------------------------------------------------------------------------------------

site {url=starhubtvanywhere.com|timezone=UTC+08:00|maxdays=7|cultureinfo=en-US|charset=UTF-8|titlematchfactor=90|firstshow=1}
site {episodesystem=xmltv_ns}

urldate.format {datestring|yyyyMMdd}
url_index {url|http://schedule.starhubtvanywhere.com/data?c=|channel|&d=|urldate}

scope.range {(splitindex)|end}
index_variable_element.modify {addstart()|'config_site_id'}

index_showsplit.scrub 	{regex||("p":.*?}]})||}
index_showsplit.modify 	{substring(type=regex)|({"a":[^}]*})}

* remove duplicate shows in showsplit;

index_temp_6.modify		{substring(type=regex)|'index_showsplit' "(\A.+\d+?\:\d{2}.+?M\").+"}
*index_temp_6.modify		{substring(type=regex)|'index_showsplit' "(\A.+\d+?\:\d+?.+?M\").+"}
index_temp_6.modify		{cleanup(removeduplicates span=1 link=index_showsplit)}
end_scope

scope.range {(indexshowdetails)|end}
index_start.scrub		{regex||"i":"([^"\\]*(?:\\.[^"\\]*)*)"||}
index_title.scrub		{regex||"a":"([^"\\]*(?:\\.[^"\\]*)*)"||}
index_episode.scrub		{regex||"e":"([^"\\]*(?:\\.[^"\\]*)*)"||}
index_temp_1.scrub		{regex||"z":"([^"\\]*(?:\\.[^"\\]*)*)"||}

index_title.modify 		{cleanup(style=jsondecode)}
index_episode.modify 	{cleanup(style=jsondecode)}

index_productiondate.modify {calculate(format=productiondate)|'index_title'}

* compose the episode in xmltv_ns
index_temp_2.modify     {substring(type=regex)|'index_title' ".+\(S(\d*)\)\z"} * the season number
index_temp_2.modify     {calculate(not "" format=F0)|1 -} * season number zero based following the xmltv_ns standard
index_episode.modify    {calculate(not "" format=F0)|1 -}
index_episode.modify    {addstart|'index_temp_2'.}
index_episode.modify    {addend|.}
index_episode.modify    {clear("..")} * clear if no season and episode
 
* remove the string at the end of the title between ()
index_title.modify      {remove(type=regex)|.+( \(.{2,4}\)\z)}

index_urlshow.modify	{clear}
index_urlshow.modify	{addstart|http://schedule.starhubtvanywhere.com/prog?c='index_variable_element'&z='index_temp_1'}
end_scope

title.scrub				{regex||"a":"([^"\\]*(?:\\.[^"\\]*)*)"||}

* remove the string at the end of the title between ()
title.modify			{remove(type=regex)|.+( \(.{2,4}\)\z)}

description.scrub		{regex||"g":"([^"\\]*(?:\\.[^"\\]*)*)"||}
actor.scrub				{regex||"c":"([^"\\]*(?:\\.[^"\\]*)*)"||}


title.modify 			{cleanup(style=jsondecode)}
description.modify 		{cleanup(style=jsondecode)}
actor.modify 			{cleanup(style=jsondecode)}
actor.modify			{replace|,|\|}

**  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _
**      #####  CHANNEL FILE CREATION (only to create the xxx-channel.xml file)
**
** @auto_xml_channel_start
*url_index {url|http://schedule.starhubtvanywhere.com/}
*index_site_id.scrub {regex||<div [^>]*?id="([^>]*?)"[^>]*?class="channel"[^>]*?data-b="[^>]*?"[^>]*?>||}
*index_site_channel.scrub {regex||<div [^>]*?id="[^>]*?"[^>]*?class="channel"[^>]*?data-b="([^>]*?)"[^>]*?>||}
*scope_range {(channellist)|end}
*index_site_id.modify {cleanup(removeduplicates=equal,100 link="index_site_channel")}
*end_scope
*** @auto_xml_channel_end
